name: Deploy Monitoring Stack

on:
  push:
    branches:
      - mono
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'mono'
        type: choice
        options:
          - test
          - verif
          - prod
          - mono

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config

      - name: Set Environment Variables
        id: env-vars
        run: |
          # Détermine l'environnement
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEPLOY_ENV="${{ github.event.inputs.environment }}"
          else
            DEPLOY_ENV="mono"
          fi
          
          # Configure les variables selon l'environnement
          if [[ "$DEPLOY_ENV" == "test" ]]; then
            echo "SERVER_IP=${{ secrets.EC2_IP_TEST }}" >> $GITHUB_ENV
            echo "DOMAIN_NAME=test.mmustar.fr" >> $GITHUB_ENV
          elif [[ "$DEPLOY_ENV" == "verif" ]]; then
            echo "SERVER_IP=${{ secrets.EC2_IP_VERIF }}" >> $GITHUB_ENV
            echo "DOMAIN_NAME=test.mmustar.fr" >> $GITHUB_ENV
          elif [[ "$DEPLOY_ENV" == "prod" ]]; then
            echo "SERVER_IP=${{ secrets.EC2_IP_PROD }}" >> $GITHUB_ENV
            echo "DOMAIN_NAME=mmustar.fr" >> $GITHUB_ENV
          elif [[ "$DEPLOY_ENV" == "mono" ]]; then
            echo "SERVER_IP=${{ secrets.EC2_IP_MONOV }}" >> $GITHUB_ENV
            echo "DOMAIN_NAME=test.mmustar.fr" >> $GITHUB_ENV
          fi
          
          echo "Environment: $DEPLOY_ENV"
          echo "SERVER_IP is set" # Sécurité: ne pas afficher l'IP
          echo "DOMAIN_NAME: $DOMAIN_NAME"

      - name: Create certificate files
        run: |
          echo "${{ secrets.CLOUDFLARE_TEST_CRT }}" > cloudflare_test.crt
          echo "${{ secrets.CLOUDFLARE_TEST_KEY }}" > cloudflare_test.key

      - name: Create Prometheus Stack values file
        run: |
          cat > prometheus-values.yaml << EOF
          grafana:
            adminPassword: "${{ secrets.MONO_PASSWORD }}"
            persistence:
              enabled: true
              storageClassName: local-path
              size: 8Gi
            ingress:
              enabled: true
              ingressClassName: traefik
              hosts:
                - grafana.monitoring.${{ env.DOMAIN_NAME }}
              tls:
                - secretName: grafana-tls
                  hosts:
                    - grafana.monitoring.${{ env.DOMAIN_NAME }}
              annotations:
                traefik.ingress.kubernetes.io/router.entrypoints: websecure

          prometheus:
            ingress:
              enabled: true
              ingressClassName: traefik
              hosts:
                - prometheus.monitoring.${{ env.DOMAIN_NAME }}
              tls:
                - secretName: prometheus-tls
                  hosts:
                    - prometheus.monitoring.${{ env.DOMAIN_NAME }}
              annotations:
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
            prometheusSpec:
              storage:
                volumeClaimTemplate:
                  spec:
                    storageClassName: local-path
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 10Gi

          alertmanager:
            ingress:
              enabled: true
              ingressClassName: traefik
              hosts:
                - alertmanager.monitoring.${{ env.DOMAIN_NAME }}
              tls:
                - secretName: alertmanager-tls
                  hosts:
                    - alertmanager.monitoring.${{ env.DOMAIN_NAME }}
              annotations:
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
            alertmanagerSpec:
              storage:
                volumeClaimTemplate:
                  spec:
                    storageClassName: local-path
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 2Gi
          EOF

      - name: Verify variables
        run: |
          echo "SERVER_IP is set (not displaying for security)"
          echo "DOMAIN_NAME: ${{ env.DOMAIN_NAME }}"
          
      - name: Copy files to EC2 instance
        run: |
          scp -i ~/.ssh/id_rsa prometheus-values.yaml ubuntu@${{ env.SERVER_IP }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa cloudflare_test.crt ubuntu@${{ env.SERVER_IP }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa cloudflare_test.key ubuntu@${{ env.SERVER_IP }}:/home/ubuntu/

      - name: Install Monitoring Stack on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.SERVER_IP }} "
            # Attendre que K3s soit prêt
            echo 'Vérification que K3s est bien démarré...'
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            until kubectl get nodes; do
              echo 'Attente de K3s...'
              sleep 5
            done

            # Créer le namespace monitoring
            echo 'Création du namespace monitoring...'
            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

            # Créer les secrets TLS
            echo 'Création des secrets TLS...'
            kubectl create secret tls grafana-tls --cert=/home/ubuntu/cloudflare_test.crt --key=/home/ubuntu/cloudflare_test.key -n monitoring --dry-run=client -o yaml | kubectl apply -f -
            kubectl create secret tls prometheus-tls --cert=/home/ubuntu/cloudflare_test.crt --key=/home/ubuntu/cloudflare_test.key -n monitoring --dry-run=client -o yaml | kubectl apply -f -
            kubectl create secret tls alertmanager-tls --cert=/home/ubuntu/cloudflare_test.crt --key=/home/ubuntu/cloudflare_test.key -n monitoring --dry-run=client -o yaml | kubectl apply -f -

            # Installer Traefik si nécessaire
            if ! kubectl get deployment -n kube-system traefik >/dev/null 2>&1; then
              echo 'Installation de Traefik...'
              helm repo add traefik https://helm.traefik.io/traefik
              helm repo update
              helm install traefik traefik/traefik \
                --namespace kube-system \
                --set ingressClass.enabled=true \
                --set ingressClass.isDefaultClass=true
            fi

            # Installer Prometheus Stack
            echo 'Installation de Prometheus Stack...'
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update
            helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
              --namespace monitoring \
              -f /home/ubuntu/prometheus-values.yaml \
              --version 45.27.2 \
              --timeout 10m
          "

      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f cloudflare_test.crt cloudflare_test.key
          rm -f prometheus-values.yaml

      - name: Display Access URLs
        run: |
          echo "====================================================="
          echo "Deployment successful! Access URLs:"
          echo "---------------------------------------------------"
          echo "Grafana:      https://grafana.monitoring.${{ env.DOMAIN_NAME }}"
          echo "Prometheus:   https://prometheus.monitoring.${{ env.DOMAIN_NAME }}"
          echo "AlertManager: https://alertmanager.monitoring.${{ env.DOMAIN_NAME }}"
          echo "====================================================="
          echo "Credentials:"
          echo "Grafana username: admin"
          echo "Grafana password: [Set via GitHub Secret MONO_PASSWORD]"
          echo "====================================================="