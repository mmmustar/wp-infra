name: Deploy WordPress on EC2

on:
  push:
    branches:
      - prod
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonage du d√©p√¥t
      - name: üì• Checkout repository
        uses: actions/checkout@v3

      # 2. Configuration de la cl√© SSH et ajout des h√¥tes connus
      - name: üîë Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_IP_TEST }} ${{ secrets.EC2_IP_PROD }} >> ~/.ssh/known_hosts

      # 3. Cr√©ation des fichiers de certificats Cloudflare √† partir des secrets
      - name: üå± Create Cloudflare certificate files from secrets
        run: |
          mkdir -p scripts
          echo "${{ secrets.CLOUDFLARE_ORIGIN_CRT }}" > scripts/cloudflare_origin.crt
          echo "${{ secrets.CLOUDFLARE_ORIGIN_KEY }}" > scripts/cloudflare_origin.key

      # 4. D√©termination de l'environnement de d√©ploiement et affectation de l'IP cible
      - name: üåç D√©terminer l'environnement de d√©ploiement
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
            echo "EC2_IP=${{ secrets.EC2_IP_PROD }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=test" >> $GITHUB_ENV
            echo "EC2_IP=${{ secrets.EC2_IP_TEST }}" >> $GITHUB_ENV
          fi

      # 5. Copier les fichiers n√©cessaires (script de d√©ploiement, certificats, secrets) sur l'instance EC2
      - name: üöÄ Copier les fichiers sur l'EC2
        run: |
          scp -i ~/.ssh/id_rsa scripts/deploy_wordpress.sh ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa scripts/cloudflare_origin.crt ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa scripts/cloudflare_origin.key ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          if [ "${{ env.DEPLOY_ENV }}" = "prod" ]; then
            scp -i ~/.ssh/id_rsa environments/prod/secrets.json ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          else
            scp -i ~/.ssh/id_rsa environments/test/secrets.json ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          fi

      # 6. Ex√©cuter le script de d√©ploiement sur l'EC2
      - name: üèóÔ∏è Ex√©cuter le script de d√©ploiement sur l'EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_IP }} "chmod +x /home/ubuntu/deploy_wordpress.sh && sudo /home/ubuntu/deploy_wordpress.sh"

      # 7. (Pour prod) D√©sactiver la configuration par d√©faut de Nginx et red√©marrer le service
      - name: üö´ D√©sactiver la configuration 'default' et red√©marrer Nginx (prod uniquement)
        if: env.DEPLOY_ENV == 'prod'
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_IP }} "sudo rm -f /etc/nginx/sites-enabled/default && sudo systemctl restart nginx"

      # 8. Affichage du message de fin de d√©ploiement
      - name: ‚úÖ D√©ploiement termin√©
        run: echo "D√©ploiement effectu√© sur ${{ env.DEPLOY_ENV }}"
