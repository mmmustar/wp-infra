# roles/k3s/tasks/main.yml
---
# Étape 1: Configuration initiale
- name: Get subnet IDs from AWS
  shell: >
    aws ec2 describe-subnets
    --region {{ aws_region }}
    --filters "Name=tag:Project,Values={{ project_name }}" "Name=tag:Environment,Values={{ environment }}"
    --query "Subnets[0].SubnetId"
    --output text
  register: subnet_info
  delegate_to: localhost
  become: false
  changed_when: false

- name: Set subnet ID
  set_fact:
    public_subnet_id: "{{ subnet_info.stdout }}"
  when: subnet_info.stdout != ""

# Étape 2: Installation de K3s
- name: Download k3s installation script
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s-install.sh
    mode: '0755'

- name: Install k3s
  shell: 
    cmd: INSTALL_K3S_VERSION={{ k3s_version }} /tmp/k3s-install.sh --write-kubeconfig-mode 644 {{ k3s_server_args }}
  args:
    creates: /usr/local/bin/k3s
  environment:
    INSTALL_K3S_EXEC: "{{ k3s_server_args }}"
  register: k3s_install

- name: Wait for k3s service to start
  systemd:
    name: k3s
    state: started
    enabled: yes
  register: k3s_service

- name: Configure kubeconfig permissions
  file:
    path: /etc/rancher/k3s/k3s.yaml
    mode: '0644'
  become: true

- name: Set KUBECONFIG environment variable
  lineinfile:
    path: /home/{{ ansible_user }}/.bashrc
    line: "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"
    state: present
  become: true

# Étape 3: Vérification de l'installation
- name: Wait for k3s node to be ready
  shell: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get nodes
  register: node_status
  until: "'Ready' in node_status.stdout"
  retries: 30
  delay: 10
  become: true

# Étape 4: Configuration du Security Group
- name: Add NodePort range to security group
  shell: >
    aws ec2 authorize-security-group-ingress 
    --region {{ aws_region }}
    --group-id {{ security_group_id }}
    --protocol tcp 
    --port 30000-32767 
    --cidr 0.0.0.0/0
  delegate_to: localhost
  become: false
  register: sg_result
  failed_when: 
    - sg_result.rc != 0 
    - '"InvalidPermission.Duplicate" not in sg_result.stderr'
  changed_when: sg_result.rc == 0

# Étape 5: Installation de Helm
- name: Include Helm installation tasks
  include_tasks: helm.yml

# Étape 6: Installation de NGINX Ingress
- name: Add ingress-nginx repository
  command: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  changed_when: true
  ignore_errors: true

- name: Update Helm repos
  command: helm repo update
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  changed_when: true

- name: Install ingress-nginx with Helm
  kubernetes.core.helm:
    name: ingress-nginx
    chart_ref: ingress-nginx/ingress-nginx
    release_namespace: ingress-nginx
    create_namespace: true
    release_values:
      controller:
        service:
          type: NodePort
          nodePorts:
            http: 32569
            https: 32570
        kind: DaemonSet
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  register: nginx_helm_result

- name: Wait for ingress-nginx pods to be Running
  shell: >
    kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller --no-headers
  register: nginx_pod_status
  until: nginx_pod_status.rc == 0 and 'Running' in nginx_pod_status.stdout
  retries: 30
  delay: 10

- name: Display ingress-nginx pod logs if not running
  shell: kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller --tail=50
  register: nginx_logs
  when: "'Running' not in nginx_pod_status.stdout"

- name: Show pod logs
  debug:
    var: nginx_logs.stdout_lines
  when: nginx_logs is defined

# Étape 7: Installation du EBS CSI Driver
- name: Include EBS CSI tasks
  include_tasks: ebs-csi.yml
  when: ebs_csi_enabled

# Étape 8: Vérification finale
- name: Verify cluster status
  command: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get nodes,pods --all-namespaces
  register: cluster_status
  changed_when: false

- name: Show cluster status
  debug:
    var: cluster_status.stdout_lines
