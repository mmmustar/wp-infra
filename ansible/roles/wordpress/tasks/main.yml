---
- name: Ensure kubeconfig directory exists
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'

- name: Copy kubeconfig locally
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_env.HOME }}/.kube/config"
    mode: '0600'
    remote_src: yes

- name: Set KUBECONFIG environment variable
  set_fact:
    kubeconfig: "{{ ansible_env.HOME }}/.kube/config"

- name: Create WordPress namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ wp_namespace }}"

- name: Include secrets tasks
  include_tasks: secrets.yml

- name: Check if WordPress deployment exists
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: Deployment
    name: wordpress
    namespace: "{{ wp_namespace }}"
  register: wp_deployment

- name: Scale down WordPress deployment to 0 replicas (if it exists)
  kubernetes.core.k8s_scale:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ wp_namespace }}"
    resource_definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: wordpress
    replicas: 0
  when: wp_deployment.resources | length > 0

- name: Wait for WordPress pods to be terminated
  shell: >
    kubectl --kubeconfig={{ kubeconfig }} get pods -n {{ wp_namespace }} -l app=wordpress --no-headers | wc -l
  register: pod_count
  until: pod_count.stdout | int == 0
  retries: 10
  delay: 5
  when: wp_deployment.resources | length > 0

- name: Delete existing PVC
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ wp_namespace }}"
    name: wp-pvc
  ignore_errors: true

- name: Create PVC and wait
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    template: storage.yaml.j2
    namespace: "{{ wp_namespace }}"
    wait: yes
    wait_timeout: 300

- name: Create WordPress resources
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    template: "{{ item }}"
    namespace: "{{ wp_namespace }}"
  loop:
    - configmap.yaml.j2
    - secret.yaml.j2
    - deployment.yaml.j2
    - service.yaml.j2

- name: Scale up WordPress deployment to desired replicas
  kubernetes.core.k8s_scale:
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ wp_namespace }}"
    resource_definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: wordpress
    replicas: "{{ wp_replicas }}"

- name: Pause 30 seconds to allow pods to start and PVC binding
  pause:
    seconds: 30

- name: Include Ingress tasks
  include_tasks: ingress.yml
  tags:
    - wordpress
    - ingress

- name: Wait for WordPress deployment
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: Deployment
    name: wordpress
    namespace: "{{ wp_namespace }}"
  register: wp_deployment
  until: wp_deployment.resources[0].status.availableReplicas is defined and wp_deployment.resources[0].status.availableReplicas > 0
  retries: 15
  delay: 10

- name: Display WordPress deployment status
  debug:
    var: wp_deployment.resources[0].status
