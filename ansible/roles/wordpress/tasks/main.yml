---
# Configuration initiale
- name: Ensure kubeconfig directory exists
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'

- name: Copy kubeconfig locally
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_env.HOME }}/.kube/config"
    mode: '0600'
    remote_src: yes

- name: Set KUBECONFIG environment variable
  set_fact:
    kubeconfig: "{{ ansible_env.HOME }}/.kube/config"

# Vérification préalable
- name: Verify storage class exists
  shell: kubectl get sc {{ storage_class_name }}
  register: sc_check
  ignore_errors: true

- name: Fail if storage class doesn't exist
  fail:
    msg: "Storage class {{ storage_class_name }} not found"
  when: sc_check.rc != 0

# Création namespace et secrets
- name: Create WordPress namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ wp_namespace }}"

- name: Include secrets tasks
  include_tasks: secrets.yml

# Nettoyage des ressources existantes
- name: Check if WordPress deployment exists
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: Deployment
    name: wordpress
    namespace: "{{ wp_namespace }}"
  register: wp_deployment

- name: Delete existing deployment if it exists
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: absent
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: wordpress
        namespace: "{{ wp_namespace }}"
  when: wp_deployment.resources | length > 0

- name: Wait for WordPress pods to be terminated
  shell: >
    kubectl --kubeconfig={{ kubeconfig }} get pods -n {{ wp_namespace }} -l app=wordpress --no-headers | wc -l
  register: pod_count
  until: pod_count.stdout | int == 0
  retries: 10
  delay: 5
  when: wp_deployment.resources | length > 0

- name: Delete existing PVC
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ wp_namespace }}"
    name: wp-pvc
  ignore_errors: true

# Création des ressources dans le bon ordre
- name: Create PVC
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition: "{{ lookup('template', 'storage.yaml.j2') | from_yaml }}"
    namespace: "{{ wp_namespace }}"
  register: pvc_result

- name: Create ConfigMap and Secret
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    template: "{{ item }}"
    namespace: "{{ wp_namespace }}"
  loop:
    - configmap.yaml.j2
    - secret.yaml.j2

- name: Create WordPress service
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    template: service.yaml.j2
    namespace: "{{ wp_namespace }}"

- name: Create WordPress deployment
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    template: deployment.yaml.j2
    namespace: "{{ wp_namespace }}"

- name: Wait for deployment to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    kind: Deployment
    name: wordpress
    namespace: "{{ wp_namespace }}"
  register: wp_deployment
  until: wp_deployment.resources | length > 0 and wp_deployment.resources[0].status.availableReplicas is defined and wp_deployment.resources[0].status.availableReplicas > 0
  retries: 30  # Augmenté pour donner plus de temps
  delay: 10

# Monitoring et débogage
- name: Get pod status
  shell: |
    kubectl get pods -n {{ wp_namespace }} -o wide
  register: pod_status
  ignore_errors: true

- name: Display pod status
  debug:
    var: pod_status.stdout_lines

- name: Get pod details
  shell: |
    kubectl describe pod -n {{ wp_namespace }} -l app=wordpress
  register: pod_details
  ignore_errors: true

- name: Display pod details
  debug:
    var: pod_details.stdout_lines

- name: Get pod logs
  shell: |
    kubectl logs -n {{ wp_namespace }} -l app=wordpress --tail=100
  register: pod_logs
  ignore_errors: true

- name: Display pod logs
  debug:
    var: pod_logs.stdout_lines

# Configuration finale
- name: Include Ingress tasks
  include_tasks: ingress.yml
  tags:
    - wordpress
    - ingress