name: Deploy Monitoring Stack

on:
  push:
    branches: [mono]
  workflow_dispatch:

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 40  # Augmenter le timeout global du job h
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH with Keep-Alive
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Configuration SSH avec ServerAliveInterval pour éviter les déconnexions
          cat > ~/.ssh/config << EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            ServerAliveInterval 60
            ServerAliveCountMax 10
          EOF
          
          chmod 600 ~/.ssh/config

      - name: Create certificate files
        run: |
          # Créer les fichiers de certificat et clé
          echo "${{ secrets.CERTIF_MONO }}" > mono.crt
          echo "${{ secrets.KEY_MONO }}" > mono.key

      - name: Create optimized monitoring script
        run: |
          cat > deploy_monitoring.sh << 'EOF'
          #!/bin/bash
          set -eo pipefail

          echo "--- Début du déploiement de la stack monitoring ---"
          
          # Configuration
          KUBECONFIG="/etc/rancher/k3s/k3s.yaml"
          export KUBECONFIG
          
          # Vérifier que les fichiers nécessaires existent
          ls -la /home/ubuntu/mono.crt /home/ubuntu/mono.key /home/ubuntu/prometheus-values.yaml
          
          # Créer le namespace monitoring
          echo "Création du namespace monitoring..."
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          
          # Créer le secret TLS
          echo "Création du secret TLS..."
          kubectl create secret tls monitoring-tls \
            --cert=/home/ubuntu/mono.crt \
            --key=/home/ubuntu/mono.key \
            --namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          
          # Déployer Prometheus Stack
          echo "Déploiement de Prometheus Stack..."
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          
          # Déployer avec un timeout plus court
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            -f /home/ubuntu/prometheus-values.yaml \
            --atomic \
            --wait \
            --timeout 15m
          
          echo "--- Déploiement terminé avec succès ---"
          
          # Afficher les ressources déployées
          kubectl get pods -n monitoring
          kubectl get ingress -n monitoring
          EOF
          
          chmod +x deploy_monitoring.sh

      - name: Transfer files
        run: |
          scp -i ~/.ssh/id_rsa scripts/prometheus-values.yaml ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa mono.crt ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa mono.key ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa deploy_monitoring.sh ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/

      - name: Install Traefik (peut être omis si déjà installé)
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && \
            helm repo add traefik https://helm.traefik.io/traefik && \
            helm repo update && \
            helm upgrade --install traefik traefik/traefik \
              --namespace kube-system \
              --set ingressClass.enabled=true \
              --set ingressClass.isDefaultClass=true \
              --atomic \
              --wait \
              --timeout 5m
          "

      - name: Execute Prometheus Stack deployment
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "sudo -E KUBECONFIG=/etc/rancher/k3s/k3s.yaml bash /home/ubuntu/deploy_monitoring.sh"

      - name: Check deployment status
        if: always()
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && \
            echo 'Statut des pods:' && \
            kubectl get pods -n monitoring && \
            echo 'Statut des ingress:' && \
            kubectl get ingress -n monitoring
          "

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f mono.crt mono.key