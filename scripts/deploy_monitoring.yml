name: Deploy Monitoring Stack

on:
  push:
    branches: [mono]
  workflow_dispatch:

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH with Keep-Alive
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          cat > ~/.ssh/config << EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            ServerAliveInterval 60
            ServerAliveCountMax 10
          EOF
          
          chmod 600 ~/.ssh/config

      - name: Create certificate files
        run: |
          echo "${{ secrets.CERTIF_MONO }}" > mono.crt
          echo "${{ secrets.KEY_MONO }}" > mono.key

      - name: Check Helm permissions and status
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "sudo rm -f /home/ubuntu/.config/helm/repositories.lock && sudo chown -R ubuntu:ubuntu /home/ubuntu/.config /home/ubuntu/.cache 2>/dev/null || true"
          
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && sudo chmod 644 \$KUBECONFIG"
          
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && helm ls -n monitoring --all || true"

      - name: Create deployment script
        run: |
          cat > deploy_monitoring.sh << 'EOF'
          #!/bin/bash
          set -eo pipefail

          # Configuration
          KUBECONFIG="/etc/rancher/k3s/k3s.yaml"
          export KUBECONFIG

          echo "--- Démarrage du déploiement de la stack monitoring ---"
          
          # Vérification des fichiers
          if [ ! -f "/home/ubuntu/mono.crt" ] || [ ! -f "/home/ubuntu/mono.key" ] || [ ! -f "/home/ubuntu/prometheus-values.yaml" ]; then
            echo "Erreur: Fichiers de certificats ou de configuration manquants"
            ls -la /home/ubuntu/
            exit 1
          fi

          # Ajout des dépôts Helm
          helm repo add traefik https://helm.traefik.io/traefik || true
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
          helm repo update

          # Installation de Traefik
          echo "--- Déploiement de Traefik ---"
          helm upgrade --install traefik traefik/traefik \
            --namespace kube-system \
            --set ingressClass.enabled=true \
            --set ingressClass.isDefaultClass=true \
            --atomic \
            --wait \
            --timeout 5m
          
          # Création du namespace monitoring
          echo "--- Création du namespace monitoring ---"
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          
          # Création du secret TLS
          echo "--- Création du secret TLS ---"
          kubectl create secret tls monitoring-tls \
            --cert=/home/ubuntu/mono.crt \
            --key=/home/ubuntu/mono.key \
            --namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          
          # Nettoyage de l'installation précédente si elle est bloquée
          echo "--- Nettoyage des installations précédentes ---"
          
          # Suppression des releases Helm existants
          helm uninstall prometheus -n monitoring --wait=false || true
          
          # Suppression des secrets Helm
          kubectl delete secret -n monitoring -l owner=helm,name=prometheus --grace-period=0 --force || true
          kubectl delete secret -n monitoring -l name=prometheus,status=pending --grace-period=0 --force || true
          
          # Attendre un peu
          echo "Attente de 10 secondes après le nettoyage..."
          sleep 10
          
          # Déploiement de Prometheus Stack
          echo "--- Déploiement de Prometheus Stack ---"
          helm install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            -f /home/ubuntu/prometheus-values.yaml \
            --timeout 15m
          
          echo "--- Déploiement terminé avec succès ---"
          
          # Affichage des ressources
          echo "--- Liste des pods ---"
          kubectl get pods -n monitoring
          
          echo "--- Liste des ingress ---"
          kubectl get ingress -n monitoring
          
          echo "--- Accès URLs ---"
          echo "- Grafana:      https://grafana-monitoring.mmustar.fr"
          echo "- Prometheus:   https://prometheus-monitoring.mmustar.fr"
          echo "- AlertManager: https://alertmanager-monitoring.mmustar.fr"
          EOF
          
          chmod +x deploy_monitoring.sh

      - name: Transfer files
        run: |
          scp -i ~/.ssh/id_rsa scripts/prometheus-values.yaml ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa mono.crt ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa mono.key ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/
          scp -i ~/.ssh/id_rsa deploy_monitoring.sh ubuntu@${{ secrets.EC2_IP_MONOV }}:/home/ubuntu/

      - name: Reset Stuck Helm Operations
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && helm uninstall prometheus -n monitoring --wait=false || true"
          
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && kubectl delete secret -n monitoring -l owner=helm,name=prometheus --force --grace-period=0 || true"
          
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "sleep 5"

      - name: Execute deployment script
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP_MONOV }} "sudo -E KUBECONFIG=/etc/rancher/k3s/k3s.yaml bash /home/ubuntu/deploy_monitoring.sh"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f mono.crt mono.key